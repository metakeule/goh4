package main

import (
	"flag"
	"fmt"
	fr "github.com/metakeule/fastreplace"
	"io/ioutil"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"regexp"
	"strings"
)

var (
	content = `
package main

import (
    "fmt"
    "github.com/metakeule/goh4/@@format@@"
    "@@package@@"
    "os"
    "time"
)

func main() {
    target := "@@target@@"
    info := fmt.Sprintf("\n  DO NOT EDIT THIS FILE!\n\n  It was automatically generated from\n\n    @@package@@\n\n  at\n\n    %s\n\n  and will be overwritten. ", time.Now())
    err := @@format@@.@@method@@(@@type@@.@@var@@, target, info)
    if err != nil {
        fmt.Printf("Error while compiling @@package@@ to %s:\n%s", target, err.Error())
        os.Exit(1)
    }
}
`
	target    = flag.String("target", "", "output file to be written to (less or scss file)")
	in        = flag.String("in", "", "input go package that either has the name class and contains a var ALL []goh4.Class with all classes or has the name id and contains a var ALL []goh4.Id with all ids")
	var_      = flag.String("var", "ALL", "name of the variable in package")
	body, _   = fr.NewString("@@", content)
	format    string
	type_     string
	method    string
	regString = "^[A-Z]([a-zA-Z])+$"
	matcher   = regexp.MustCompile(regString)
)

func Replace() []byte {
	i := body.Instance()
	i.AssignString("format", format)
	i.AssignString("package", *in)
	i.AssignString("target", *target)
	i.AssignString("method", method)
	i.AssignString("type", type_)
	i.AssignString("var", *var_)
	return i.Bytes()
}

func Exec(name string, opts ...string) (output string, err error) {
	cmd := exec.Command(name, opts...)
	var out []byte
	out, err = cmd.CombinedOutput()
	output = string(out)
	if err != nil {
		err = fmt.Errorf(output)
	}
	return
}

func Which(cmd string) (path string, err error) {
	path, err = Exec("which", cmd)
	path = strings.TrimRight(path, "\n")
	if path == "" {
		err = fmt.Errorf("not found: %s", cmd)
	}
	return
}

func main() {

	flag.Parse()

	ext := strings.ToLower(filepath.Ext(*target))
	switch ext {
	case ".scss":
		format = "scss"
	case ".less":
		format = "less"
	default:
		fmt.Printf("invalid target file: %#v, should be of type .scss or .less\n", *target)
		os.Exit(1)
	}

	i := strings.LastIndex(*in, "/")
	if i < 1 {
		fmt.Printf("invalid input package name %#v\n", *in)
		os.Exit(1)
	}

	type_ = (*in)[i+1:]

	switch type_ {
	case "class":
		method = "CompileClasses"
	case "id":
		method = "CompileIds"
	default:
		fmt.Printf("invalid input package %#v, should be class or id\n", *in)
		os.Exit(1)
	}
	if matcher.MatchString(*var_) == false {
		fmt.Printf("invalid var name %#v, must match %s\n", *var_, regString)
		os.Exit(1)
	}

	//func TempDir(dir, prefix string) (name string, err error)
	dir, err := ioutil.TempDir("/tmp", "classidcompiler")
	if err != nil {
		fmt.Println("Can't create tempdir: ", err.Error())
		os.Exit(1)
	}
	defer func() {
		os.RemoveAll(dir)
	}()

	file := path.Join(dir, "main.go")
	err = ioutil.WriteFile(file, Replace(), os.FileMode(0644))
	if err != nil {
		fmt.Println("Can't create tempfile: ", err.Error())
		os.Exit(1)
	}

	goBin, err := Which("go")
	if err != nil {
		fmt.Println("can't find go compiler in $PATH")
		os.Exit(1)
	}

	var out string
	out, err = Exec(goBin, "run", file)
	if err != nil {
		fmt.Println("Error while compliling:\n", out)
		os.Exit(1)
	}

}
